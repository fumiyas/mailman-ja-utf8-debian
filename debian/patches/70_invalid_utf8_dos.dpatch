#! /bin/sh /usr/share/dpatch/dpatch-run
## 70_invalid_utf8_dos.dpatch by  <lionel@mamane.lu>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Avoid DOS if attachement filename is invalid Unicode string

@DPATCH@
diff -urNad mailman-2.1.5~/Mailman/Handlers/Scrubber.py mailman-2.1.5/Mailman/Handlers/Scrubber.py
--- mailman-2.1.5~/Mailman/Handlers/Scrubber.py	2003-12-01 02:43:18.000000000 +0100
+++ mailman-2.1.5/Mailman/Handlers/Scrubber.py	2005-11-13 15:29:26.585952860 +0100
@@ -266,7 +266,10 @@
             finally:
                 os.umask(omask)
             desc = part.get('content-description', _('not available'))
-            filename = part.get_filename(_('not available'))
+            try:
+                filename = part.get_filename(_('not available'))
+            except UnicodeDecodeError:
+                filename = _('not available')
             del part['content-type']
             del part['content-transfer-encoding']
             part.set_payload(_("""\
@@ -356,7 +359,10 @@
     # e.g. image/jpg (should be image/jpeg).  For now we just store such
     # things as application/octet-streams since that seems the safest.
     ctype = msg.get_content_type()
-    fnext = os.path.splitext(msg.get_filename(''))[1]
+    try:
+        fnext = os.path.splitext(msg.get_filename(''))[1]
+    except UnicodeDecodeError:
+        fnext = ''
     ext = guess_extension(ctype, fnext)
     if not ext:
         # We don't know what it is, so assume it's just a shapeless
@@ -375,7 +381,10 @@
     try:
         # Now base the filename on what's in the attachment, uniquifying it if
         # necessary.
-        filename = msg.get_filename()
+        try:
+            filename = msg.get_filename()
+        except UnicodeDecodeError:
+            filename = None
         if not filename:
             filebase = 'attachment'
         else:

#! /bin/sh -e
#
# postinst script for Debian python packages.
# Written 1998 by Gregor Hoffleit <flight@debian.org>.
# Updated 2001 by Tollef Fog Heen <tfheen@debian.org>
#
. /usr/share/debconf/confmodule

PACKAGE=mailman
DIRLIST="/usr/lib/mailman/Mailman /usr/lib/mailman/bin /usr/lib/mailman/cron /usr/lib/mailman/scripts"
PYLIBDIR="/usr/lib/python`python -c 'import sys; print sys.version[:3]'`"

#UCF#

if [ "$1" = "configure" ]; then

    # Ensure the file exists before we awk it.
    if [ ! -f /etc/cron.d/mailman ]; then
    cat > /etc/cron.d/mailman <<EOF
# At 8AM every day, mail reminders to admins as to pending requests.
# They are less likely to ignore these reminders if they're mailed
# early in the morning, but of course, this is local time... ;)
0 8 * * * list /usr/lib/mailman/cron/checkdbs
#
# At 9AM, send notifications to disabled members that are due to be
# reminded to re-enable their accounts.
0 9 * * * list /usr/lib/mailman/cron/disabled
#
# Noon, mail digests for lists that do periodic as well as threshhold delivery.
0 12 * * * list /usr/lib/mailman/cron/senddigests
#
# 5 AM on the first of each month, mail out password reminders.
0 5 1 * * list /usr/lib/mailman/cron/mailpasswds
#
# Every 5 mins, try to gate news to mail.  You can comment this one out
# if you don't want to allow gating, or don't have any going on right now,
# or want to exclusively use a callback strategy instead of polling.
# 0,5,10,15,20,25,30,35,40,45,50,55 * * * * list /usr/lib/mailman/cron/gate_news
#
# At 3:27am every night, regenerate the gzip'd archive file.  Only
# turn this on if the internal archiver is used and
# GZIP_ARCHIVE_TXT_FILES is false in mm_cfg.py
27 3 * * * list /usr/lib/mailman/cron/nightly_gzip
EOF
    elif dpkg --compare-versions "$2" lt 2.1; then
        # In versions before 2.1, /etc/cron.{daily,monthly}/mailman did 
        # some stuff which is now moved into /etc/cron.d/mailman.
        # Those files are just removed, since they now serve no useful 
        # purpose.
        rm -f /etc/cron.daily/mailman /etc/cron.monthly/mailman
        
        # Comment out any lines containing qrunner, since it is no longer 
        # used.
	awk '/^[^#]*qrunner/ { print "# " $LINE;next }; //' < /etc/cron.d/mailman > /etc/cron.d/mailman.$$
        mv -f /etc/cron.d/mailman.$$ /etc/cron.d/mailman

        # Add those lines which were removed from cron.{daily,monthly}
        grep -q '0 8 \* \* \* list /usr/lib/mailman/cron/checkdbs' /etc/cron.d/mailman || cat >> /etc/cron.d/mailman <<EOF
# At 8AM every day, mail reminders to admins as to pending requests.
# They are less likely to ignore these reminders if they're mailed
# early in the morning, but of course, this is local time... ;)
0 8 * * * list /usr/lib/mailman/cron/checkdbs
EOF
        
        grep -q '0 9 \* \* \* list /usr/lib/mailman/cron/disabled' /etc/cron.d/mailman || cat >> /etc/cron.d/mailman <<EOF
#
# At 9AM, send notifications to disabled members that are due to be
# reminded to re-enable their accounts.
0 9 * * * list /usr/lib/mailman/cron/disabled
EOF

        grep -q '0 12 * * * list /usr/lib/mailman/cron/senddigests' /etc/cron.d/mailman || cat >> /etc/cron.d/mailman <<EOF
#
# Noon, mail digests for lists that do periodic as well as threshhold delivery.
0 12 * * * list /usr/lib/mailman/cron/senddigests
EOF

        grep -q '0 5 1 \* \* list /usr/lib/mailman/cron/mailpasswds' /etc/cron.d/mailman || cat >> /etc/cron.d/mailman <<EOF
#
# 5 AM on the first of each month, mail out password reminders.
0 5 1 * * list /usr/lib/mailman/cron/mailpasswds
EOF
        grep -q '27 3 \* \* \* list /usr/lib/mailman/cron/nightly_gzip' /etc/cron.d/mailman || cat >> /etc/cron.d/mailman <<EOF
#
# At 3:27am every night, regenerate the gzip'd archive file.  Only
# turn this on if the internal archiver is used and
# GZIP_ARCHIVE_TXT_FILES is false in mm_cfg.py
27 3 * * * list /usr/lib/mailman/cron/nightly_gzip
EOF
    fi

    # This fuckup got in 2.1-4, it should be removed at sarge + 1
    for pattern in '0 8 \* \* \* /usr/lib/mailman/cron/checkdbs'\
        '0 9 \* \* \* /usr/lib/mailman/cron/disabled' \
        '0 12 \* \* \* /usr/lib/mailman/cron/senddigests' \
        '0 5 1 \* \* /usr/lib/mailman/cron/mailpasswds' \
        '27 3 \* \* \* /usr/lib/mailman/cron/nightly_gzip' \
        '0,5,10,15,20,25,30,35,40,45,50,55 \* \* \* \* /usr/lib/mailman/cron/gate_news'; do
      if grep -q "$pattern" /etc/cron.d/mailman; then
          replacement=$(echo "$pattern" | sed -e 's,/usr/lib,list /usr/lib,')
          sed -e "s|$pattern|$replacement|" < /etc/cron.d/mailman > /etc/cron.d/mailman.$$
          mv -f /etc/cron.d/mailman.$$ /etc/cron.d/mailman
      fi
    done

    db_get mailman/gate_news || true
    if [ "$RET" = "no" ]; then
	# Comment out any lines containing the words "gate_news"
	awk '/^[^#]*gate_news/ { print "# " $LINE;next }; //' < /etc/cron.d/mailman > /etc/cron.d/mailman.$$
    else
	# Remove commenting of any lines containing gate_news
	awk '/^[ \t]*#.*gate_news/ { sub(/^[ \t]*#[ \t]*/, ""); print; next }; //' < /etc/cron.d/mailman > /etc/cron.d/mailman.$$
    fi
    mv -f /etc/cron.d/mailman.$$ /etc/cron.d/mailman

    if [ -e /etc/mailman/mm_cfg.py ]; then
        if grep -q "^PUBLIC_ARCHIVE_URL *= *'/pipermail'" /etc/mailman/mm_cfg.py; then
        # Upgrading from 2.0 changed the semantics of PUBLIC_ARCHIVE_URL.  
        # Remove post sarge+1
            awk '/^PUBLIC_ARCHIVE_URL/ { print "# " $LINE;next }; //' < /etc/mailman/mm_cfg.py > /etc/mailman/mm_cfg.py.$$
            mv -f /etc/mailman/mm_cfg.py.$$ /etc/mailman/mm_cfg.py
        fi
        if ! grep -q DEFAULT_EMAIL_HOST /etc/mailman/mm_cfg.py; then
            # upgrading from 2.0, add DEFAULT_EMAIL_HOST, remove post-sarge+1
            echo "DEFAULT_EMAIL_HOST = DEFAULT_HOST_NAME" >> /etc/mailman/mm_cfg.py
        fi

        if ! grep -q DEFAULT_URL_HOST /etc/mailman/mm_cfg.py; then
            # upgrading from 2.0, add DEFAULT_URL_HOST, remove post-sarge+1
            echo "DEFAULT_URL_HOST = DEFAULT_HOST_NAME" >> /etc/mailman/mm_cfg.py
        fi

        # Uncruftify.  I was on something bad.
        rm -f /etc/cron.d/mm_cfg.py

    fi
fi

db_stop || true

case "$1" in
    configure|abort-upgrade|abort-remove|abort-deconfigure)
	if [ -x /usr/bin/python ]; then
	    for i in $DIRLIST; do
		python -O $PYLIBDIR/compileall.py -q $i
		python $PYLIBDIR/compileall.py -q $i
		rm -f /usr/lib/$PACKAGE/Mailman/mm_cfg.pyc
		rm -f /usr/lib/$PACKAGE/Mailman/mm_cfg.pyo
		chmod -R go=rX $i
	    done
	fi 

        if [ -e /etc/mailname ]
	    then 
            DOMAIN=$(cat /etc/mailname)
        else
            DOMAIN=localhost.localdomain
        fi
	if [ ! -e /etc/$PACKAGE/mm_cfg.py ]; then
	    echo "Configuring $PACKAGE for domain $DOMAIN ..."
	    sed s/thunderchild.aszi.sztaki.hu/$DOMAIN/g /usr/lib/mailman/Mailman/mm_cfg.py.dist \
		> /etc/$PACKAGE/mm_cfg.py
	fi

	if grep -q mm_defaults /etc/mailman/mm_cfg.py; then
		echo "Changing mm_defaults to Defaults in mm_cfg.py"
                echo "Fixing host name in /etc/mm_cfg.py"
		sed s/mm_defaults/Defaults/ "s/'localhost'/$DOMAIN/g" "s/http://localhost/$DOMAIN/g" </etc/mailman/mm_cfg.py >/etc/mailman/mm_cfg.py.new
		mv /etc/mailman/mm_cfg.py /etc/mailman/mm_cfg.py.old
		mv /etc/mailman/mm_cfg.py.new /etc/mailman/mm_cfg.py
	fi
	sg list -c "umask 002; /usr/lib/mailman/bin/update;"

	if [ "$1" = "configure" -a "$2" != "" ] && dpkg --compare-versions "$2" lt "1.0b10"; then
		echo
		echo "You will need to manually update your mailing lists."
		echo "For each mailing list you need to copy the file /etc/mailman/options.html to"
		echo "/var/lib/mailman/lists/<listname>/options.html."
		echo
		echo "However, if you have edited this file via the Web interface, you will have to"
		echo "merge your changes into this file, otherwise you will lose your changes."
	fi

	# fix permissions
	find /var/lib/mailman/ -type d -print0 | xargs -r -0 chmod g+s
	chmod o-r,o+x /var/lib/mailman/archives/private


	if [ "$1" = "configure" -a "$2" != "" ] && dpkg --compare-versions "$2" lt "1.0rel"; then
		echo ""
		echo "Please read /usr/share/doc/mailman/README.Debian to learn how"
		echo "to integrate mailman best with your MTA and webserver"

		echo -n "Press RETURN to continue..."
		DEBIAN_FRONTEND=`echo "$DEBIAN_FRONTEND" | tr A-Z a-z`
		if [ ! "$DEBIAN_FRONTEND" = "noninteractive" ]; then
		    read foo
		fi
	fi
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

#DEBHELPER#
